{"version":3,"sources":["static/hermeus-thumbnail.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","nTripsFastPlane","Math","floor","Button","onClick","div","className","whileHover","scale","whileTap","Animation","rightBound","useState","leftCollide","setLeftCollide","rightCollide","setRightCollide","animationRef","useRef","ringRef","slowControls","useAnimation","fastControls","slowY","fastY","trips","setTrips","cur","setCur","prev","setPrev","ref","style","position","animate","transition","ease","duration","flip","img","src","onUpdate","latest","x","Spacer","height","ringDiameter","current","offsetWidth","xBounds","start","y","App","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c49808c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hermeus-thumbnail.677bf243.jpg\";","import React, { useRef, useState } from 'react';\nimport './App.css';\nimport src from './static/hermeus-thumbnail.jpg';\nimport { motion, useAnimation } from 'framer-motion';\n\n\nconst speedRatio = 5/0.85;\nconst nTripsFastPlane = Math.floor(speedRatio);\n\n// Measured in seconds\nconst fastPlaneTripDuration = 1;\nconst slowPlaneTripDuration = fastPlaneTripDuration*speedRatio;\n\n\nfunction Button({onClick}) {\n  return (\n    <motion.div onClick={onClick} className=\"button\"\n      whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }}\n    >\n      Run\n    </motion.div>\n  )\n}\n\nfunction Animation() {\n  // Measured in pixels\n  const leftBound = 0;\n  let rightBound = 0;\n  const altitude = 50;\n\n  const [leftCollide, setLeftCollide] = useState(leftBound);\n  const [rightCollide, setRightCollide] = useState(rightBound);\n\n  const animationRef = useRef();\n  const ringRef = useRef();\n\n  const slowControls = useAnimation();\n  const fastControls = useAnimation();\n\n  const slowY = [0, altitude, 0];\n  const fastY = [0, -altitude, 0];\n\n  const [curInit, prevInit, tripsInit] = [1, 1, 0];\n  const [trips, setTrips] = useState(tripsInit);\n  const [cur, setCur] = useState(curInit);\n  const [prev, setPrev] = useState(prevInit);\n\n  function onUpdate(latest) {\n    setCur(latest.x < leftCollide || latest.x > rightCollide? 1:0);\n\n    if (cur === 1 && prev === 0) {\n      setTrips(trips+1);\n    }\n\n    setPrev(cur);\n  }\n\n  const onClick = () => {\n    setCur(curInit);\n    setPrev(prevInit);\n    setTrips(tripsInit);\n\n    const ringDiameter = ringRef.current.offsetWidth;\n\n    rightBound = animationRef.current.offsetWidth - ringDiameter;\n\n    setLeftCollide(leftBound + ringDiameter);\n    setRightCollide(rightBound - ringDiameter);\n\n    const xBounds = [leftBound, rightBound];\n\n    slowControls.start({\n      x: xBounds,\n      y: slowY,\n    });\n\n    fastControls.start({\n      x: xBounds,\n      y: fastY,\n    });\n  }\n\n  return (\n    <div className=\"Animation\">\n      <div className=\"row\">\n        <div className=\"yellowBox\"></div>\n        <div className=\"planeName\">Mach 5 vs. <br/>Today's Planes</div>\n        <div className=\"animationBox\"></div>\n        <div className=\"tripCounter\">One-way trips: {trips}</div>\n      </div>\n      <div className=\"row\">\n        <div className=\"box\"></div>\n        <div className=\"cityLabel\">NY</div>\n        <div ref={animationRef} className=\"animationBox\">\n            <div className=\"ring\" style={{position: \"absolute\"}}/>\n            <motion.div className=\"circle\"\n              style={{position:\"absolute\"}}\n              animate={slowControls}\n              transition={{\n                ease: \"easeInOut\",\n                duration: slowPlaneTripDuration,\n                flip: 0,\n              }}\n            />\n            <motion.img src={src} className=\"circle\"\n              animate={fastControls}\n              transition={{\n                ease: \"easeInOut\",\n                duration: fastPlaneTripDuration,\n                flip: nTripsFastPlane - 1,\n              }}\n              onUpdate={onUpdate}\n            />\n          <div ref={ringRef} className=\"ring\"/>\n        </div>\n        <div className=\"cityLabel\">Paris</div>\n      </div>\n      <Spacer height=\"20vh\"/>\n      <div className=\"row center\">\n        <Button onClick={onClick}/>\n      </div>\n    </div>\n  )\n}\n\nfunction Spacer({height}) {\n  return (\n    <div style={{height: height}}/>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Spacer height=\"5vh\"/>\n      <h1>Speed Visualization</h1>\n      <Spacer height=\"10vh\"/>\n      <Animation/>\n      <Spacer height=\"5vh\"/>\n      <div className=\"row center sansSerif\">\n        <a href=\"https://www.instagram.com/p/B_iZBUfJpw-/\"\n        target=\"_blank\" rel=\"noopener noreferrer\">\n          Link to original visualization\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}